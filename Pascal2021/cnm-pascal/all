Comparing files T\ALG19.PAS and NEW\ALG19.PAS
***** T\ALG19.PAS
***** NEW\ALG19.PAS

*****


Comparing files T\ALG23.PAS and NEW\ALG23.PAS
***** T\ALG23.PAS


var
***** NEW\ALG23.PAS

{modified 1991 - 01 - 13}
var
*****

***** T\ALG23.PAS
    begin
      res:=nlres(i, n, Bvec, notcomp);

***** NEW\ALG23.PAS
    begin
      res:=nlres(i, n, Bvec, notcomp, Workdata);

*****

***** T\ALG23.PAS
        begin
          nljac(i, n, Bvec, X);
          res:=nlres(i, n, Bvec, notcomp);
          for j:=1 to n do
***** NEW\ALG23.PAS
        begin
          nljac(i, n, Bvec, X, workdata);
          res:=nlres(i, n, Bvec, notcomp, Workdata);
          for j:=1 to n do
*****

***** T\ALG23.PAS
          repeat
            i:=i+1; res:=nlres(i,n,Bvec,notcomp);
            if (not notcomp) then  p:=p+res*res;
          until notcomp or (i>=n);
          ifn:=ifn+1;
***** NEW\ALG23.PAS
          repeat
            i:=i+1; res:=nlres(i,n,Bvec,notcomp, Workdata);
            if (not notcomp) then  p:=p+res*res;
          until notcomp or (i>=m);  {MODIFICATION m replaces n 1991-01-13}
          ifn:=ifn+1;
*****

***** T\ALG23.PAS
***** NEW\ALG23.PAS

*****


Comparing files T\DR0102.PAS and NEW\DR0102.PAS
***** T\DR0102.PAS
          Copyright 1988, 1990 J.C.Nash
}
***** NEW\DR0102.PAS
          Copyright 1988, 1990 J.C.Nash
          Minor fix for zero rows 1993-07-14
}
*****

***** T\DR0102.PAS
      Z[j]:= sqrt(Z[j]);
      for i:=1 to nRow do U[i,j]:=W[i,j]/Z[j];
      for i:=1 to nCol do V[i,j]:=W[i+nRow,j];
***** NEW\DR0102.PAS
      Z[j]:= sqrt(Z[j]);
      {MOD: 930714}
      for i:=1 to nRow do if Z[j]>0.0 then U[i,j]:=W[i,j]/Z[j]
                                      else U[i,j]:=0.0;
      for i:=1 to nCol do V[i,j]:=W[i+nRow,j];
*****


Comparing files T\DR1920.PAS and NEW\DR1920.PAS
***** T\DR1920.PAS
***** NEW\DR1920.PAS

*****


Comparing files T\DR22.PAS and NEW\DR22.PAS
***** T\DR22.PAS
{$I turbo.cnm}
program dr22(input,output);
{dr22.PAS == driver for conjugate gradients method

  This program is designed to minimise functions of n parameters.

  Present example uses the problem file ROSEN.PAS, which must be
  replaced with similar code for the user's problem.

          Copyright 1988 J.C.Nash
}

{$I constype.def}
{$I tdstamp.pas} {time and date stamp}
{$I Calceps.pas}
{$I rosen.pas}
{$I alg22.pas}
{$I startup.pas}
{
fnmin.pas
  -- a main program to run function minimisation procedures
}

var
  n          : integer; {the order of the problem}
  Bvec       : rvector; {current set of parameters}
  X          : rvector; {"best" set of parameters}
  Workdata   : probdata; { the problem data type from CONSTYPE.DEF}
  i          : integer;
  Fmin       : real;   {for the minimal function value found}
  fail       : boolean; {set TRUE if the method fails in some way}
  mytol      : real; {to store a convergence tolerance}

begin
  banner:='dr21.pas -- driver for conjugate gradients minimisation';
  startup;
  fminset(n,Bvec,Workdata); {sets up problem and defines starting
                  values of Bvec}
  mytol:=-1.0; {Note: set the tolerance negative to indicate that procedure
            must obtain an appropriate value.}
  cgmin(n,Bvec,X,Fmin,Workdata,fail,mytol); {minimise the function}
  writeln;
  writeln(confile);
  writeln(' Minimum function value found =',Fmin);
  writeln(confile,' Minimum function value found =',Fmin);
  writeln(' At parameters');
  writeln(confile,' At parameters');
  for i:=1 to n do
  begin
    writeln(' Bvec[',i,']=',X[i]);
    writeln(confile,' Bvec[',i,']=',X[i]);
  end; {loop to write out parameters}
  flush(confile); close(confile); if infname<>'con' then close(infile);
end. {dr22.pas -- conjugate gradients minimisation}

***** NEW\DR22.PAS
dr22.pas -- driver for conjugate gradients minimisation
1990/12/20 20:37:45
File for input of control data ([cr] for keyboard) ex22.cnm
File for console image ([cr] = nul) dr22.pas -- driver for conjugate gradients minimisation
Function: Rosenbrock Banana Valley
Classical starting point (-1.2,1)
alg22.pas -- Nash Algorithm 22 version 2 1988-03-24
  Conjugate gradients function minimiser
Steplength saving factor multiplies best steplength found at the
  end of each iteration as a starting value for 
*****


Comparing files T\DR23.PAS and NEW\DR23.PAS
***** T\DR23.PAS
{$I rosen.pas}
{$I alg07.pas}
***** NEW\DR23.PAS
{$I rosen.pas}
{*** replace 'rosen' with 'logistic' in above line to run 3 parameter
       logistic function fit ***}
{$I alg07.pas}
*****


Comparing files T\JJACF.PAS and NEW\JJACF.PAS
***** T\JJACF.PAS

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean): real;
{computes residuals for the nonlinear least squares form of the
***** NEW\JJACF.PAS

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean;
                                            var Workdata: probdata): real;
{computes residuals for the nonlinear least squares form of the
*****

***** T\JJACF.PAS

procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector);
{computes derivatives of residuals for the nonlinear least squares
***** NEW\JJACF.PAS

procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector;
                                              var Workdata:probdata);
{computes derivatives of residuals for the nonlinear least squares
*****


Comparing files T\ROSEN.PAS and NEW\ROSEN.PAS
***** T\ROSEN.PAS

function fminfn(n: integer; var Bvec: rvector; Workdata:probdata;
            var nocomp:boolean):real;
***** NEW\ROSEN.PAS

function fminfn(n: integer; var Bvec: rvector; var Workdata:probdata;
            var nocomp:boolean):real;
*****

***** T\ROSEN.PAS
end; {fminfn from rosen.pas}
procedure fmingr(n:integer;Bvec:rvector; Workdata:probdata; var g:rvector);
{computes the gradient of the Rosenbrock banana valley at point Bvec
***** NEW\ROSEN.PAS
end; {fminfn from rosen.pas}
procedure fmingr(n:integer;Bvec:rvector; var Workdata:probdata; 
                                                   var g:rvector);
{computes the gradient of the Rosenbrock banana valley at point Bvec
*****

***** T\ROSEN.PAS

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean): real;
{computes residuals for the nonlinear least squares form of the
***** NEW\ROSEN.PAS

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean;
                                           var Workdata: probdata): real;
{computes residuals for the nonlinear least squares form of the
*****

***** T\ROSEN.PAS
end; {nlres from rosen.pas}
procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector);
{computes derivatives of residuals for the nonlinear least squares
***** NEW\ROSEN.PAS
end; {nlres from rosen.pas}
procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector;
                                              var Workdata: probdata);
{computes derivatives of residuals for the nonlinear least squares
*****


