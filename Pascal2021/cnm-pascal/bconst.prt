{ bounds constraint mods marked with comment} {BC!!}
  bcind = (onupper, onlower, masked, free); {BC!!} {indicator type
                       to tell program the bounds constraint status}
  probdtax = record           {BC!! -- mod from probdtax}
          m     : integer; {number of observations}
          nvar  : integer; {number of variables}
          nconst: integer; {number of constants}
          vconst: array[1..Maxconst] of real;
          Ydata : array[1..Maxobs, 1..Maxvars] of real;
          nlls  : boolean; {true if problem is nonlinear least squares}
          bconst: array[1..Maxparm] of bcind; {BC!!} {bounds constraint
                  indicators}
          lower: array[1..Maxparm] of real; {BC!!} {lower bounds}
          upper: array[1..Maxparm] of real; {BC!!} {upper bounds}
        end;
  Workdata.lower[1]:=-1.5; {BC!!}
  Workdata.lower[2]:=-1.0; {BC!!}
  Workdata.upper[1]:=6.0;  {BC!!}
  Workdata.upper[2]:=2.0;  {BC!!}
  Workdata.bconst[1]:=free;  {BC!!}
  Workdata.bconst[2]:=free;  {BC!!}
  nbound    : integer; {number of bounds constraits active} {BC!!}
        {BC!! start}
        steplength:=1.0; {start with a maximal steplength}
        nbound:=0; {to count the number of constraints active}
        for i:=1 to n do {loop to find correct steplength maximum}
        begin
          if Workdata.bconst[i]=free then
          begin
            if t[i]<>0.0 then {no limit on steplength for zero step element}
            begin
              if t[i]>0.0 then
                s:=(Workdata.upper[i]-X[i])/t[i]
                else s:=(Workdata.lower[i]-X[i])/t[i];
                {Note: since t[i]<0, this s is positive}
(*              write('parm ',i,' t = ',t[i],'  step =',s); readln; {??}  *)
              if s<steplength then steplength:=s; {reduce steplength}
            end; {if t[i]<>0.0}
          end {free parameter}
          else nbound:=nbound+1;
        end; {for loop to check steplength bounds}
        writeln('Number of bounds constraints active =',nbound);
        writeln(confile,'Number of bounds constraints active =',nbound);
        s:=steplength;
        if s<1.0 then
        begin
          writeln('Step reduced to ',s,' by bounds');
          writeln(confile,'Step reduced to ',s,' by bounds');
        end;
        {BC!! end}
            if Workdata.bconst[i]=free then {BC!!}
            begin  {BC!!}
              Bvec[i]:=X[i]+steplength*t[i];
              if (reltest+X[i])=(reltest+Bvec[i]) then count:=count+1;
            end {free parameter} {BC!!}
            else Bvec[i]:=X[i]; {BC!! do we need this??}
          end;
          if count<n-nbound then {BC!!}
