{ERRADD.CNM -- list of files corrected 91-1-14}
{<<<ERRATA.CNM}
ERRATA.CNM 

Errata notes for 

              Compact Numerical Methods for Computers:
              Linear Algebra and Function Minimisation

                          Second Edition

                           John C. Nash

                  (Bristol: Adam Hilger)   1990

     (Distributed in USA by the American Institute of Physics.)

Date: 1991 - 01 - 14

Algorithm 23.

There is an error in Algorithm 23, page 214.

The 3rd line from the bottom of the page reads

          until notcomp or (i>=n);

It SHOULD read
  
          until notcomp or (i>=m);

That is, we wish to compare i to m, NOT n.

While not an error, the occasion of this repair has been used to
allow for the saving of residuals in nonlinear least squares
problems.  This requires some minor modifications to the calling
sequences for the function NLRES and procedure NLJAC which are to be
part of problem files such as ROSEN.PAS or JJACF.PAS and the new
problem file LOGISTIC.PAS.

Wherever function NLRES is called, using a statement such as

       res:=nlres(i, n, Bvec, notcomp);

the call should be in the form

       res:=nlres(i, n, Bvec, notcomp, Workdata);

Similarly, wherever procedure NLJAC is called, using a statement like

          nljac(i, n, Bvec, X);

the call should be in the form

          nljac(i, n, Bvec, X, Workdata);


Consequent alterations to the program files:

     ALG23.PAS  -- changed to reflect correction of the error and
                   addition of Workdata to the calling sequence of
                   NLRES (3 places) and NLJAC (1 place)

     DR23.PAS   -- modified to note that there is an alternative
                   test problem LOGISTIC.PAS. The file must be 
                   edited to "include" LOGISTIC.PAS instead of
                   ROSEN.PAS.
     
     ROSEN.PAS  -- modified to include Workdata in the defining 
                   statement for NLRES and NLJAC. Workdata is also
                   altered to be VARiable in FMINFN and FMINGR to
                   allow working information to be saved in this
                   data structure. Workdata is defined to be of
                   type probdata, defined in file CONSTYPE.DEF.

     JJACF.PAS  -- modified to include Workdata in the defining 
                   statement for NLRES and NLJAC. Workdata is also
                   altered to be VARiable in FMINFN and FMINGR to
                   allow working information to be saved in this
                   data structure.

New problem file
   
     LOGISTIC.PAS -- a problem file to allow the nonlinear least
                   squares fit of data to a 3 parameter logistic
                   growth curve.

New data files

     EX23A.CNM  -- file to provide the Hobbs data (page 145 CNM2)
                   for LOGISTIC.PAS

     DR23AX     -- file to allow for batch testing of LOGISTIC.PAS

{>>> end of file ERRATA.CNM --       92 lines }
{<<<ALG23.PAS}
procedure modmrt( n : integer;
          var Bvec : rvector;
          var X : rvector;
          var Fmin  : real;
            Workdata : probdata);

{modified 1991 - 01 - 13}
var
  a, c: smatvec;
  delta, v : rvector;
  dec, eps, inc, lambda, p, phi, res : real;
  count, i, ifn, igrad, j, k, nn2, q : integer;
  notcomp, singmat, calcmat: boolean;

begin
  writeln('alg23.pas -- Nash Marquardt nonlinear least squares');
  writeln(confile,'alg23.pas -- Nash Marquardt nonlinear least squares');
  with Workdata do
  begin
    if nlls = false then halt;
    Fmin:=big;
    inc:=10.0;
    dec:=0.4;
    eps:=calceps;
    lambda:=0.0001;
    phi:=1.0;
    ifn:=0;  igrad:=0;
    calcmat:=true;
    nn2:=(n*(n+1)) div 2;
    p:=0.0;
    for i:=1 to m do
    begin
      res:=nlres(i, n, Bvec, notcomp, Workdata);

      if notcomp then halt;
      p:=p+res*res;
    end;
    ifn:=ifn+1;
    Fmin:=p;
    count:=0;

    while count<n do
    begin

      if calcmat then
      begin
        writeln(igrad,' ',ifn,'  sum of squares=',Fmin);
        writeln(confile, igrad,' ',ifn,'  sum of squares=',Fmin);
        for i:=1 to n do
        begin
          write(Bvec[i]:10:5,' ');
          write(confile,Bvec[i]:10:5,' ');
          if (7 * (i div 7) = i) and (i<n) then
          begin
            writeln;
            writeln(confile);
          end;
        end;
        writeln;
        writeln(confile);
        igrad:=igrad+1;
        for j:=1 to nn2 do a[j]:=0.0;
        for j:=1 to n do v[j]:=0.0;
        for i:=1 to m do
        begin
          nljac(i, n, Bvec, X, workdata);
          res:=nlres(i, n, Bvec, notcomp, Workdata);
          for j:=1 to n do
          begin
            v[j]:=v[j]+X[j]*res;
            q:=(j*(j-1)) div 2;
            for k:=1 to j do a[q+k]:=a[q+k]+X[j]*X[k];
          end;
        end;
        for j:=1 to nn2 do c[j]:=a[j];
        for j:=1 to n do X[j]:=Bvec[j];
      end;
      writeln('LAMDA =',lambda:8);
      writeln(confile,'LAMDA =',lambda:8);
      for j:=1 to n do
      begin
        q:=(j*(j+1)) div 2;
        a[q]:=c[q]*(1.0+lambda)+phi*lambda;
        delta[j]:=-v[j];
        if j>1 then
          for i:=1 to (j-1) do a[q-i]:=c[q-i];
      end;
      notcomp:=false;
      Choldcmp(n, a, singmat);
      if (not singmat) then
      begin
        Cholback(n, a, delta);
        count:=0;
        for i:=1 to n do
        begin
          Bvec[i]:=X[i]+delta[i];
          if (reltest + Bvec[i])=(reltest+X[i]) then count:=count+1;

        end;
        if count<n then
        begin
          p:=0.0; i:=0;
          repeat
            i:=i+1; res:=nlres(i,n,Bvec,notcomp, Workdata);
            if (not notcomp) then  p:=p+res*res;
          until notcomp or (i>=m);  {MODIFICATION m replaces n 1991-01-13}
          ifn:=ifn+1;
        end;
      end;
      if count<n then
        if (not singmat) and (not notcomp) and (p<Fmin) then
        begin
          lambda:=lambda*dec;
          Fmin:=p;
          calcmat:=true;
        end
      else
      begin
        lambda:=lambda*inc;
        if lambda<eps*eps then lambda:=eps;
        calcmat:=false;
      end;

    end;
  end;
end;
{>>> end of file ALG23.PAS --      126 lines }
{<<<DR23.PAS}
{$I turbo.cnm}
program dr23(input,output);
{dr23.PAS == driver for Nash Marquardt nonlinear least squares

  This program is designed to minimise functions of n parameters.

  Present example uses the problem file ROSEN.PAS, which must be
  replaced with similar code for the user's problem.


          Copyright 1988 J.C.Nash
}
{$I constype.def}
{$I tdstamp.pas}  {time and date stamp}
{$I calceps.pas}
{$I rosen.pas}
{*** replace 'rosen' with 'logistic' in above line to run 3 parameter
       logistic function fit ***}
{$I alg07.pas}
{$I alg08.pas}
{$I alg23.pas}
{$I startup.pas}

{main program}
var
  n          : integer; {the order of the problem}
  Bvec       : rvector; {current set of parameters}
  X          : rvector; {"best" set of parameters}
  Workdata   : probdata;
  i          : integer;
  Fmin       : real;
  fail       : boolean;
  mytol      : real;

begin
  banner:='dr23.pas -- Marquardt Nash nonlinear least squares';
  startup;
  fminset(n,Bvec,Workdata);
            {Sets up problem and defines starting values of Bvec}
  mytol:=-1.0; {Note: set the tolerance negative to indicate that
            procedure must obtain an appropriate value.}
  Workdata.nlls:=true;
  modmrt( n, Bvec, X, Fmin, Workdata);
  writeln;
  writeln(confile);
  writeln(' Minimum function value found =',Fmin);
  writeln(confile,' Minimum function value found =',Fmin);
  writeln(' At parameters');
  writeln(confile,' At parameters');
  for i:=1 to n do
  begin
    writeln(' Bvec[',i,']=',X[i]);
    writeln(confile,' Bvec[',i,']=',X[i]);
  end;
  flush(confile); close(confile); if infname<>'con' then close(infile);
end. {dr23.pas == Nash Marquardt nonlinear least squares}

{>>> end of file DR23.PAS --       57 lines }
{<<<ROSEN.PAS}
{rosen.pas
  == suite of procedures and functions defining the Rosenbrock
    banana shaped valley problem.
}
procedure fminset(var n:integer;var Bvec: rvector; var Workdata: probdata);
{sets up problem and defines starting values of Bvec}
{setup for Rosenbrock problem from rosen.pas}
begin
  writeln('Function: Rosenbrock Banana Valley');
  writeln(confile,'Function: Rosenbrock Banana Valley');
  n:=2;
  Workdata.m:=2; {for nonlinear least squares problems}
  Workdata.nvar:=0;
  Bvec[1]:=-1.2;
  Bvec[2]:=1.0;
  writeln('Classical starting point (-1.2,1)');
  writeln(confile,'Classical starting point (-1.2,1)');
end; {fminset from rosen.pas}

function fminfn(n: integer; var Bvec: rvector; var Workdata:probdata;
            var nocomp:boolean):real;
{this is the Rosenbrock banana valley function from rosen.pas}
begin
  nocomp:=false; {never undefined here}
  fminfn:=sqr(Bvec[2]-sqr(Bvec[1]))*100.0+sqr(1.0-Bvec[1]);
end; {fminfn from rosen.pas}
procedure fmingr(n:integer;Bvec:rvector; var Workdata:probdata; 
                                                   var g:rvector);
{computes the gradient of the Rosenbrock banana valley at point Bvec
  from rosen.pas}
begin
  g[1]:=-400.0*Bvec[1]*(Bvec[2]-sqr(Bvec[1]))-2.0*(1.0-Bvec[1]);
  g[2]:=200.0*(Bvec[2]-sqr(Bvec[1]));
end; {fmingrad from rosen.pas}

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean;
                                           var Workdata: probdata): real;
{computes residuals for the nonlinear least squares form of the
  Rosenbrock function from rosen.pas}
var
  temp: real;
begin
  nocomp:=false; {never set here}
  case i of
    1: begin
      temp:=10.0*(Bvec[2]-sqr(Bvec[1]));
    end;
    2: begin
      temp:=1.0-Bvec[1];
    end;
    else halt; {safety stop}
  end; {case}
  nlres := temp; {assign residual}
end; {nlres from rosen.pas}
procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector;
                                              var Workdata: probdata);
{computes derivatives of residuals for the nonlinear least squares
  form of the Rosenbrock function from rosen.pas}
var
  t1, t2: real;
begin
  case i of
    1: begin
      jacrow[1]:=-20.0*Bvec[1];
      jacrow[2]:=10.0;
    end;
    2: begin
      jacrow[1]:=-1.0;
      jacrow[2]:=0.0;
    end;
    else halt; {safety stop}
  end; {case}
end; {nljac from rosen.pas}
{end of rosen.pas test function code suite}
{>>> end of file ROSEN.PAS --       74 lines }
{<<<JJACF.PAS}
{JJACF.PAS
  == suite of procedures and functions defining the Jaffrelot
    first order autocorrelation minimisation function.
    Example 14-1. This is designed to use data in file
    EX1920J.CNM with driver program DR1920.PAS, or file
    EX27J.CNM with driver program DR27.PAS.

    The driver programs MUST have the INCLUDE statements
    modified to invoke the present code (JJACF.PAS).
}
procedure fminset(var n:integer;var Bvec: rvector; var Workdata: probdata);
{sets up problem and defines starting values of Bvec}
var
  i: integer;
  descn : string[80];
{setup for problem from JJACF.PAS}
begin
  with Workdata do
  begin
    writeln('Function: Jaffrelot Minimisation of First Order ACF');
    writeln(confile,'Function: Jaffrelot Minimisation of First Order ACF');
    nvar:=2;
    write('Number of points in data series = ');
    readln(infile,m);
    if (infname<>'con') then writeln(m);
    writeln(confile,'Number of points in data series = ',m);
    readln(infile,descn);
    if (infname<>'con') then writeln(descn);
    writeln(confile,descn);
    for i:=1 to m do
    begin
      read(infile,Ydata[i,1]);
      if infname<>'con' then write(Ydata[i,1]:10:5);
      write(confile,Ydata[i,1]:10:5);
      if (7*(i div 7)=i) and (i<m) then
      begin
        writeln;
        writeln(confile);
      end;
    end; {for i}
    writeln;
    writeln(confile);
  end; {with Workdata}
  n:=2;
  writeln('Enter starting parameters');
  writeln(confile,'Enter starting parameters');
  readln(infile,Bvec[1],Bvec[2]);
  if infname<>'con' then writeln(Bvec[1],' ',Bvec[2]);
  writeln('starting point (',Bvec[1],',',Bvec[2],')');
  writeln(confile,'starting point (',Bvec[1],',',Bvec[2],')');
end; {fminset from JJACF.PAS}

function fminfn(n: integer; var Bvec: rvector; Workdata:probdata;
            var nocomp:boolean):real;
{this is the function from JJACF.PAS}
var
  i, j : integer;
  u, s, t, r1 : real;

begin
  nocomp:=false; {never undefined here}
  with Workdata do
  begin
    for i:=3 to m do
    begin
      Ydata[i,2]:=Ydata[i,1]-Bvec[1]*Ydata[i-1,1]-Bvec[2]*Ydata[i-2,1];
    end;
    u:=0.0;
    for i:=3 to m do u:=u+Ydata[i,2];
    u:=u/(m-2); {mean in Kendall definition}
    s:=0.0; t:=0.0;
    for i:=4 to m do s:=s+(Ydata[i,2]-u)*(Ydata[i-1,2]-u);
    for i:=3 to m do t:=t+sqr(Ydata[i,2]-u);
    if t=0.0 then
    begin
      writeln('Variance is zero -- stopping');
      writeln(confile,'Variance is zero -- stopping');
      halt;
    end;
    r1:=(m-2)*s/((m-3)*t);
  end; {with Workdata}
  fminfn:=sqr(r1);
end; {fminfn from JJACF.PAS}

procedure fmingr(n:integer;Bvec:rvector; Workdata:probdata; var g:rvector);
{computes the gradient at point Bvec from JJACF.PAS}
begin
  halt; {not provided here}
end; {fmingrad from JJACF.PAS}

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean;
                                            var Workdata: probdata): real;
{computes residuals for the nonlinear least squares form of the
  function from JJACF.PAS}
var
  temp: real;
begin
  halt; {not provided here}
end; {nlres from JJACF.PAS}

procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector;
                                              var Workdata:probdata);
{computes derivatives of residuals for the nonlinear least squares
  form of the function from JJACF.PAS}
var
  t1, t2: real;
begin
  halt; {not provided here}
end; {nljac from JJACF.PAS}
{end of JJACF.PAS test function code suite}
{>>> end of file JJACF.PAS --      110 lines }
{<<<LOGISTIC.PAS}
{logistic.pas
  == suite of procedures and functions defining the 3 parameter logistic
    modelling function and residuals
}
procedure fminset(var n:integer;var Bvec: rvector; var Workdata: probdata);
{sets up problem and defines starting values of Bvec}
{setup for 3 parameter logistic function}
var i: integer;
begin
  writeln('Function: 3 parameter logistic growth curve');
  writeln(confile,'Function: 3 parameter logistic growth curve');
  n:=3;
  with Workdata do
  begin
    readln(infile,m);
    writeln(' m =',m:0);
    writeln(confile,' m =',m:0);
    nvar:=2;
    for i:=1 to m do
    begin
      readln(infile, Ydata[i,1]);
      write(Ydata[i,nvar]:10:5,'  ');
      write(confile,Ydata[i,1]:10:5,'  ');
      if (5 * int(i/5) = i ) then
      begin
        writeln; writeln(confile);
      end;
    end; {for i}
    writeln; writeln(confile);
    readln(infile,Bvec[1]);
    readln(infile,Bvec[2]);
    readln(infile,Bvec[3]);
    writeln('Starting values:',Bvec[1],' ',Bvec[2],' ',Bvec[3]);
    writeln(confile,'Starting values:',Bvec[1],' ',Bvec[2],' ',Bvec[3]);
  end; {with Workdata}
end; {fminset from rosen.pas}

function nlres(i, n : integer; Bvec: rvector; var nocomp: boolean;
                                            var Workdata: probdata): real;
{computes residuals for the nonlinear least squares 3 parameter logistic
   function growth curve  logistic.pas}
{NOTE: Workdata has been added to the procedure call. It has been
  declared with the 'var' modifier because intermediate data is
  saved withing the Workdata structure (the residuals).}
var
  temp: real;
begin
  if abs(0.1*i*Bvec[3])>50.0 then nocomp:=true
  else
  begin
   nocomp:=false; {computable function}
   temp:=100.0*Bvec[1]/(1.0+10.0*Bvec[2]*exp(-0.1*Bvec[3]*I))-
        Workdata.Ydata[I,1];
   Workdata.Ydata[i,2]:=temp;
   nlres := temp; {assign residual}
  end; {else}
end; {nlres from rosen.pas}
procedure nljac(i, n: integer; Bvec: rvector; var jacrow: rvector;
                                            var Workdata: probdata);
{computes derivatives of residuals for the nonlinear least squares
  form of the Rosenbrock function from rosen.pas}
{NOTE: Workdata has been added to the procedure call. It has been
  declared with the 'var' modifier in case intermediate data is
  saved withing the Workdata structure.}
var
  t1, t2: real;
begin
  jacrow[1]:=100./(1.+10.*Bvec[2]*EXP(-0.1*Bvec[3]*I));
  jacrow[2]:=-Bvec[1]*0.1*sqr(jacrow[1])*EXP(-0.1*Bvec[3]*I);
  jacrow[3]:=-0.1*jacrow[2]*Bvec[2]*I;
end; {nljac from logistic.pas}
{end of logistic.pas test function code suite}
{>>> end of file LOGISTIC.PAS --       72 lines }
{<<<EX23A.CNM}
out23a.
12
5.308
7.24
9.638
12.866
17.069
23.192
31.443
38.558
50.156
62.948
75.995
91.972
2
5
3

{>>> end of file EX23A.CNM --       18 lines }
{<<<DR23AX}
ex23a.cnm
{>>> end of file DR23AX --        1 lines }
{### END OF OUTPUT FILE e:errall         567 lines }
