      SUBROUTINE A23MRT(N,B,M,TOL,A,C,N2,X,V,D,RES,DRES,NOCOM,P0,IFN,
     #IG,F,IPR)
C  ALGORITHM 23  MODIFIED MARQUARDT NONLINEAR SUM OF SQUARES
C    MINIMISATION
C  J.C. NASH   JULY 1978, FEBRUARY 1980, APRIL 1989
C     N  =  NO. OF PARAMETERS TO BE ADJUSTED
C     B  =  INITIAL POINT (SET OF PARAMETERS
C     M  =  NO. OF RESIDUALS
C    TOL =  RESET VALUE FOR MARQUARDT PARAMETER LAMBDA
C    A.C =  WORKING VECTORS OF N2 ELEMENTS
C  X,V,D =  WORKING VECTORS OF N  ELEMENTS
C  RES   =  NAME OF FUNCTION TO CALCULATE RESIDUAL NO. I
C           RVAL=RES(N,B,I,NOCOM)
C  DRES  =  NAME OF SUBROUTINE TO CALCULATE DERIVATIVES OF RESIDUAL I
C           CALL DRES(N,B,I,D)
C  NOCOM =  LOGICAL FLAG SET .TRUE. IF INITIAL POINT INFEASIBLE
C  P0    =  MINIMAL VALUE OF SUM OF SQUARES (OUTPUT)
C  IFN  =  LIMIT ON FUNCTION EVALUATIONS (INPUT)  (SUM OF SQUARES)
C        =  COUNT OF FUNCTION EVALUATIONS (OUTPUT)
C  IG    =  COUNT OF DERIVATIVE EVALUATIONS
C  F     =  WORKING VECTOR OF LENGTH M USED TO SAVE RESIDUALS
C  IPR  =  PRINT CHANNEL  IPR.GT.0 FOR PRINTING.
C  STEP 0
      LOGICAL NOCOM
      INTEGER N,M,N2,IFN,IG,LIM,I,J,Q,IJ,J1,COUNT
      REAL B(N),X(N),V(N),D(N),A(N2),C(N2),F(M)
      REAL  S,TOL,INC,DEC,LAMBDA,PHI,P,P0
C  FOR SAFETY RESET N2
      N2=N*(N+1)/2
C  PHI - NASH ADDITION TO MARQUARDT ALGORITHM
      PHI=1.0
C  INCREASE AND DECREASE FACTORS
      INC=10.0
      DEC=0.4
      LIM=IFN
      IFN=0
      IG=0
      LAMBDA=TOL
C  STEP 1
      P=0.0
C  BETTER DONE DOUBLE PRECISION
      IFN=IFN+1
      DO 15 I=1,M
        F(I)=RES(N,B,I,NOCOM)
        IF(NOCOM)RETURN
        P=P+F(I)**2
  15  CONTINUE
C  STEP 2
  20  IG=IG+1
      LAMBDA=LAMBDA*DEC
      P0=P
      IF(IPR.GT.0)WRITE(IPR,959)IG,IFN,P0
 959  FORMAT( 6H ITN #,I4, 8H EVALN *,I4,13H  SUMSQUARES=,1PE16.8)
C  STEP 3
      DO 34 J=1,N2
        A(J)=0.0
  34  CONTINUE
      DO 36 J=1,N
        V(J)=0.0
  36  CONTINUE
C  STEP 4
      DO 48 I=1,M
        CALL DRES(N,B,I,D)
        S=F(I)
        DO 46 J=1,N
           V(J)=V(J)+S*D(J)
           Q=J*(J-1)/2
           DO 44 K=1,J
            IJ=Q+K
             A(IJ)=A(IJ)+D(J)*D(K)
  44       CONTINUE
  46    CONTINUE
  48  CONTINUE
C  STEP 5
      DO 54 J=1,N2
        C(J)=A(J)
  54  CONTINUE
      DO 56 J=1,N
        D(J)=B(J)
  56  CONTINUE
C  STEP 6
  60  DO 68 J=1,N
        Q=J*(J+1)/2
        A(Q)=C(Q)*(1.0+LAMBDA)+PHI*LAMBDA
        X(J)=-V(J)
        IF(J.EQ.1)GOTO 68
        J1=J-1
        DO 66 I=1,J1
          IJ=Q-I
          A(IJ)=C(IJ)
  66    CONTINUE
  68  CONTINUE
C  STEP 7
      NOCOM=.FALSE.
      CALL A7CH(A,N2,N,NOCOM)
      IF(NOCOM)GOTO 130
C  STEP 8
      CALL A8CS(A,N2,X,N)
C  STEP 9
      COUNT=0
      DO 95 I=1,N
        B(I)=D(I)+X(I)
        IF(B(I).EQ.D(I))COUNT=COUNT+1
  95  CONTINUE
C  STEP 10
      IF(COUNT.EQ.N)RETURN
C  STEP 11
      IFN=IFN+1
      IF(IFN.GT.LIM)GOTO 140
      NOCOM=.FALSE.
      P=0.0
      DO 115 I=1,M
        F(I)=RES(N,B,I,NOCOM)
        IF(NOCOM)GOTO 130
        P=P+F(I)**2
 115  CONTINUE
C  STEP 12
      IF(P.LT.P0)GOTO 20
C  STEP 13
 130  LAMBDA=LAMBDA*INC
      IF(LAMBDA.EQ.0.0)LAMBDA=TOL
      GOTO 60
C  RESET PARAMETERS
 140  DO 144 I=1,N
        B(I)=D(I)
 144  CONTINUE
      RETURN
      END
